#!/usr/bin/env python3
import os
import json
from typing import Dict, Any, List
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ STT —Å–∏—Å—Ç–µ–º—ã
–í–∫–ª—é—á–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, API —Ç–µ—Å—Ç—ã, UI —Ç–µ—Å—Ç—ã, Celery —Ç–µ—Å—Ç—ã
"""

import sys
import argparse
import time
from pathlib import Path
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

# Django setup
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'converter_site.settings')
import django
django.setup()

# –ò–º–ø–æ—Ä—Ç—ã —Ç–µ—Å—Ç–æ–≤
from test_audio_generator import TestAudioGenerator
from test_stt_functionality import run_stt_tests
from test_ui_functionality import run_ui_tests
from test_celery_api import pytest

logger = logging.getLogger(__name__)


class TestRunner:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.test_results = {}
        self.start_time = None
        self.end_time = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler('test_results.log', mode='w', encoding='utf-8')
            ]
        )
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        header = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                   –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò STT –°–ò–°–¢–ï–ú–´                 ‚ïë
‚ïë                              –®–∞–≥ 8 –∏–∑ –ø–ª–∞–Ω–∞                                 ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë 1. ‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ—Å—Ç-–∫–ª–∏–ø—ã RU/EN (15-60 —Å–µ–∫) ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏             ‚ïë
‚ïë 2. ‚úÖ –î–ª–∏–Ω–Ω—ã–π —Ñ–∞–π–ª 5-10 –º–∏–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏            ‚ïë
‚ïë 3. ‚úÖ UI: drag-and-drop, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤             ‚ïë
‚ïë 4. ‚úÖ Autotest Celery + API —á–µ—Ä–µ–∑ pytest                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        print(header)
    
    def generate_test_data(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ"""
        print("\nüéµ –≠–¢–ê–ü 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
        print("=" * 60)
        
        try:
            generator = TestAudioGenerator()
            
            print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...")
            test_files = generator.create_test_suite()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            total_files = sum(len(files) for files in test_files.values())
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {total_files}")
            print(f"   - –ö–æ—Ä–æ—Ç–∫–∏–µ RU: {len(test_files.get('short_ru', []))}")
            print(f"   - –ö–æ—Ä–æ—Ç–∫–∏–µ EN: {len(test_files.get('short_en', []))}")
            print(f"   - –î–ª–∏–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(test_files.get('long_files', []))}")
            
            self.test_results['data_generation'] = {
                'status': 'success',
                'files_created': total_files,
                'categories': {k: len(v) for k, v in test_files.items()},
                'duration': 'N/A'
            }
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.test_results['data_generation'] = {
                'status': 'error',
                'error': str(e)
            }
            return False
    
    def run_api_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç API –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
        print("\nüîß –≠–¢–ê–ü 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ STT")
        print("=" * 60)
        
        try:
            start_time = time.time()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º STT —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
            print("–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ STT...")
            result = run_stt_tests()
            
            end_time = time.time()
            duration = end_time - start_time
            
            success_rate = 0
            if result.testsRun > 0:
                success_rate = ((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100)
            
            self.test_results['api_tests'] = {
                'status': 'completed',
                'total_tests': result.testsRun,
                'successful': result.testsRun - len(result.failures) - len(result.errors),
                'failed': len(result.failures),
                'errors': len(result.errors),
                'success_rate': round(success_rate, 2),
                'duration': round(duration, 2)
            }
            
            print(f"‚úÖ API —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ {duration:.1f} —Å–µ–∫")
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            
            return len(result.failures) == 0 and len(result.errors) == 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–æ–≤: {e}")
            self.test_results['api_tests'] = {
                'status': 'error',
                'error': str(e)
            }
            return False
    
    def run_ui_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç UI —Ç–µ—Å—Ç—ã"""
        print("\nüñ•Ô∏è –≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ Selenium –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        try:
            from selenium import webdriver
        except ImportError:
            print("‚ö†Ô∏è Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º UI —Ç–µ—Å—Ç—ã.")
            print("   –î–ª—è –∑–∞–ø—É—Å–∫–∞ UI —Ç–µ—Å—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install selenium webdriver-manager")
            self.test_results['ui_tests'] = {
                'status': 'skipped',
                'reason': 'Selenium not installed'
            }
            return True
        
        try:
            start_time = time.time()
            
            print("–ó–∞–ø—É—Å–∫ UI —Ç–µ—Å—Ç–æ–≤...")
            result = run_ui_tests()
            
            end_time = time.time()
            duration = end_time - start_time
            
            success_rate = 0
            if result.testsRun > 0:
                success_rate = ((result.testsRun - len(result.failures) - len(result.errors)) / result.testsRun * 100)
            
            self.test_results['ui_tests'] = {
                'status': 'completed',
                'total_tests': result.testsRun,
                'successful': result.testsRun - len(result.failures) - len(result.errors),
                'failed': len(result.failures),
                'errors': len(result.errors),
                'success_rate': round(success_rate, 2),
                'duration': round(duration, 2)
            }
            
            print(f"‚úÖ UI —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ {duration:.1f} —Å–µ–∫")
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            
            return len(result.failures) == 0 and len(result.errors) == 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ UI —Ç–µ—Å—Ç–æ–≤: {e}")
            self.test_results['ui_tests'] = {
                'status': 'error',
                'error': str(e)
            }
            return False
    
    def run_celery_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Celery –∏ pytest —Ç–µ—Å—Ç—ã"""
        print("\n‚öôÔ∏è –≠–¢–ê–ü 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery + API —á–µ—Ä–µ–∑ pytest")
        print("=" * 60)
        
        try:
            start_time = time.time()
            
            print("–ó–∞–ø—É—Å–∫ Celery/pytest —Ç–µ—Å—Ç–æ–≤...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º pytest –¥–ª—è Celery —Ç–µ—Å—Ç–æ–≤
            test_file = Path(__file__).parent / 'test_celery_api.py'
            
            exit_code = pytest.main([
                str(test_file),
                '-v',
                '-s',
                '--tb=short',
                '--color=yes',
                f'--junit-xml={Path(__file__).parent / "celery_test_results.xml"}'
            ])
            
            end_time = time.time()
            duration = end_time - start_time
            
            self.test_results['celery_tests'] = {
                'status': 'completed' if exit_code == 0 else 'failed',
                'exit_code': exit_code,
                'duration': round(duration, 2)
            }
            
            print(f"‚úÖ Celery —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ {duration:.1f} —Å–µ–∫")
            print(f"   –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {exit_code}")
            
            return exit_code == 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Celery —Ç–µ—Å—Ç–æ–≤: {e}")
            self.test_results['celery_tests'] = {
                'status': 'error',
                'error': str(e)
            }
            return False
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 70)
        
        total_duration = (self.end_time - self.start_time) if self.end_time and self.start_time else 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_tests = 0
        total_successful = 0
        total_failed = 0
        total_errors = 0
        
        for test_type, results in self.test_results.items():
            if isinstance(results, dict) and 'total_tests' in results:
                total_tests += results.get('total_tests', 0)
                total_successful += results.get('successful', 0)
                total_failed += results.get('failed', 0)
                total_errors += results.get('errors', 0)
        
        overall_success_rate = (total_successful / total_tests * 100) if total_tests > 0 else 0
        
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration:.1f} —Å–µ–∫")
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {total_successful}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_failed}")
        print(f"üö® –û—à–∏–±–æ–∫: {total_errors}")
        print(f"üéØ –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overall_success_rate:.1f}%")
        
        print("\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ —ç—Ç–∞–ø–∞–º:")
        
        # –û—Ç—á–µ—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        if 'data_generation' in self.test_results:
            data_gen = self.test_results['data_generation']
            status_icon = "‚úÖ" if data_gen['status'] == 'success' else "‚ùå"
            print(f"   {status_icon} –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {data_gen['status']}")
            if 'files_created' in data_gen:
                print(f"     üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {data_gen['files_created']}")
        
        # –û—Ç—á–µ—Ç –ø–æ API —Ç–µ—Å—Ç–∞–º
        if 'api_tests' in self.test_results:
            api_tests = self.test_results['api_tests']
            status_icon = "‚úÖ" if api_tests['status'] == 'completed' else "‚ùå"
            print(f"   {status_icon} API —Ç–µ—Å—Ç—ã: {api_tests.get('success_rate', 0):.1f}% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")
            if 'duration' in api_tests:
                print(f"     ‚è±Ô∏è –í—Ä–µ–º—è: {api_tests['duration']} —Å–µ–∫")
        
        # –û—Ç—á–µ—Ç –ø–æ UI —Ç–µ—Å—Ç–∞–º
        if 'ui_tests' in self.test_results:
            ui_tests = self.test_results['ui_tests']
            if ui_tests['status'] == 'skipped':
                print(f"   ‚ö†Ô∏è UI —Ç–µ—Å—Ç—ã: –ø—Ä–æ–ø—É—â–µ–Ω—ã ({ui_tests.get('reason', 'Unknown reason')})")
            else:
                status_icon = "‚úÖ" if ui_tests['status'] == 'completed' else "‚ùå"
                print(f"   {status_icon} UI —Ç–µ—Å—Ç—ã: {ui_tests.get('success_rate', 0):.1f}% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")
                if 'duration' in ui_tests:
                    print(f"     ‚è±Ô∏è –í—Ä–µ–º—è: {ui_tests['duration']} —Å–µ–∫")
        
        # –û—Ç—á–µ—Ç –ø–æ Celery —Ç–µ—Å—Ç–∞–º
        if 'celery_tests' in self.test_results:
            celery_tests = self.test_results['celery_tests']
            status_icon = "‚úÖ" if celery_tests.get('exit_code') == 0 else "‚ùå"
            print(f"   {status_icon} Celery —Ç–µ—Å—Ç—ã: –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ {celery_tests.get('exit_code', 'N/A')}")
            if 'duration' in celery_tests:
                print(f"     ‚è±Ô∏è –í—Ä–µ–º—è: {celery_tests['duration']} —Å–µ–∫")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        self._save_report_to_file(total_duration, overall_success_rate)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if overall_success_rate >= 90:
            print("   üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.")
        elif overall_success_rate >= 75:
            print("   üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã.")
        elif overall_success_rate >= 50:
            print("   ‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.")
        else:
            print("   üö® –ù–∏–∑–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã.")
        
        if total_failed > 0 or total_errors > 0:
            print("   üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º.")
    
    def _save_report_to_file(self, total_duration: float, success_rate: float):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ JSON —Ñ–∞–π–ª"""
        try:
            report_data = {
                'timestamp': datetime.now().isoformat(),
                'test_session': {
                    'total_duration': total_duration,
                    'overall_success_rate': success_rate,
                    'start_time': self.start_time.isoformat() if self.start_time else None,
                    'end_time': self.end_time.isoformat() if self.end_time else None
                },
                'test_results': self.test_results,
                'environment': {
                    'python_version': sys.version,
                    'django_version': django.VERSION,
                    'project_root': str(project_root)
                }
            }
            
            report_file = Path(__file__).parent / f'test_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2)
            
            print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    def run_all(self, skip_ui: bool = False, skip_celery: bool = False) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        self.start_time = datetime.now()
        
        self.print_header()
        
        success = True
        
        # –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not self.generate_test_data():
            success = False
        
        # –≠—Ç–∞–ø 2: API —Ç–µ—Å—Ç—ã
        if not self.run_api_tests():
            success = False
        
        # –≠—Ç–∞–ø 3: UI —Ç–µ—Å—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if not skip_ui:
            if not self.run_ui_tests():
                success = False
        
        # –≠—Ç–∞–ø 4: Celery —Ç–µ—Å—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if not skip_celery:
            if not self.run_celery_tests():
                success = False
        
        self.end_time = datetime.now()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_report()
        
        return success


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è STT —Å–∏—Å—Ç–µ–º—ã'
    )
    
    parser.add_argument(
        '--skip-ui',
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å UI —Ç–µ—Å—Ç—ã (–ø–æ–ª–µ–∑–Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç Selenium)'
    )
    
    parser.add_argument(
        '--skip-celery',
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å Celery —Ç–µ—Å—Ç—ã'
    )
    
    parser.add_argument(
        '--config',
        type=str,
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ (JSON)'
    )
    
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = {}
    if args.config and Path(args.config).exists():
        try:
            with open(args.config, 'r', encoding='utf-8') as f:
                config = json.load(f)
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {args.config}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    runner = TestRunner(config)
    success = runner.run_all(
        skip_ui=args.skip_ui,
        skip_celery=args.skip_celery
    )
    
    # –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
    exit_code = 0 if success else 1
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º: {exit_code}")
    
    sys.exit(exit_code)


if __name__ == '__main__':
    main()
