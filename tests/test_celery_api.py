#!/usr/bin/env python3
import os
import json
import tempfile
from django.conf import settings
from typing import Dict, List, Any
"""
–ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è Celery + API —á–µ—Ä–µ–∑ pytest
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –æ—á–µ—Ä–µ–¥–µ–π, –≤–æ—Ä–∫–µ—Ä–æ–≤
"""

import sys
import pytest
import time
from pathlib import Path
from unittest.mock import Mock, patch
import logging

# Django setup
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'converter_site.settings')

import django
django.setup()

from django.test import Client
from django.core.files.uploadedfile import SimpleUploadedFile

# Celery imports
from celery import Celery
from celery.result import AsyncResult

# Project imports
from test_audio_generator import TestAudioGenerator

logger = logging.getLogger(__name__)


class CeleryTestHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Celery"""
    
    def __init__(self):
        self.app = self._setup_test_celery()
        self.test_generator = TestAudioGenerator()
        self.test_files = self.test_generator.create_test_suite()
    
    def _setup_test_celery(self) -> Celery:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º eager mode –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        test_app = Celery('test_app')
        test_app.conf.update(
            task_always_eager=True,  # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            task_eager_propagates=True,  # –ü—Ä–æ–ø–∞–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            broker_url='memory://',  # In-memory –±—Ä–æ–∫–µ—Ä
            result_backend='cache+memory://',  # In-memory —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            task_serializer='json',
            accept_content=['json'],
            result_serializer='json',
        )
        return test_app
    
    def create_test_task(self, task_name: str = "test_task"):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        @self.app.task(name=task_name)
        def test_celery_task(data: dict):
            """–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞"""
            return {
                'status': 'completed',
                'input_data': data,
                'result': f"Processed: {data.get('input', 'no input')}"
            }
        return test_celery_task
    
    def create_failing_task(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
        @self.app.task(name="failing_task")
        def failing_task(should_fail=True):
            if should_fail:
                raise Exception("Test exception")
            return {"status": "success"}
        return failing_task
    
    def create_long_running_task(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–æ–ª–≥–æ –≤—ã–ø–æ–ª–Ω—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É"""
        @self.app.task(name="long_task", bind=True)
        def long_running_task(self, duration=10):
            for i in range(duration):
                self.update_state(
                    state='PROGRESS',
                    meta={'current': i, 'total': duration}
                )
                if not self.app.conf.task_always_eager:
                    time.sleep(1)  # –°–ø–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ eager mode
            return {'status': 'completed', 'total': duration}
        return long_running_task


@pytest.fixture(scope="session")
def celery_helper():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è CeleryTestHelper"""
    return CeleryTestHelper()


@pytest.fixture
def django_client():
    """Django test client"""
    return Client()


@pytest.fixture
def test_audio_files(celery_helper):
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    return celery_helper.test_files


class TestCeleryBasics:
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã Celery —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def test_celery_app_configuration(self, celery_helper):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Celery"""
        print("\n=== –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery ===")
        
        app = celery_helper.app
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        assert app.conf.task_serializer == 'json'
        assert app.conf.accept_content == ['json']
        assert app.conf.result_serializer == 'json'
        
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
        assert app.main == 'test_app'
        print("‚úÖ Celery app –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def test_simple_task_execution(self, celery_helper):
        """–¢–µ—Å—Ç 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏"""
        print("\n=== –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ ===")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É
        test_task = celery_helper.create_test_task()
        
        test_data = {'input': 'test_value', 'timestamp': time.time()}
        result = test_task.delay(test_data)
        
        # –í eager mode —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å—Ä–∞–∑—É
        assert result.ready()
        assert result.successful()
        
        task_result = result.get()
        assert task_result['status'] == 'completed'
        assert task_result['input_data'] == test_data
        
        print("‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {task_result}")
    
    def test_task_failure_handling(self, celery_helper):
        """–¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∑–∞–¥–∞—á–∞—Ö"""
        print("\n=== –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –ø–∞–¥–∞–µ—Ç
        failing_task = celery_helper.create_failing_task()
        
        result = failing_task.delay(should_fail=True)
        
        assert result.ready()
        assert result.failed()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–ø–∞–≥–∏—Ä—É–µ—Ç—Å—è
        with pytest.raises(Exception, match="Test exception"):
            result.get(propagate=True)
        
        print("‚úÖ –û—à–∏–±–∫–∏ –≤ –∑–∞–¥–∞—á–∞—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_task_progress_tracking(self, celery_helper):
        """–¢–µ—Å—Ç 4: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á"""
        print("\n=== –¢–µ—Å—Ç 4: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ===")
        
        long_task = celery_helper.create_long_running_task()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å –∫–æ—Ä–æ—Ç–∫–∏–º duration –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        result = long_task.delay(duration=3)
        
        assert result.ready()  # –í eager mode –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É
        
        task_result = result.get()
        assert task_result['status'] == 'completed'
        assert task_result['total'] == 3
        
        print("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


class TestSTTCeleryIntegration:
    """–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ STT —Å Celery"""
    
    @patch('converter_site.tasks.convert_audio_to_text')
    def test_audio_to_text_task_creation(self, mock_task, django_client, test_audio_files):
        """–¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ"""
        print("\n=== –¢–µ—Å—Ç 5: –°–æ–∑–¥–∞–Ω–∏–µ STT –∑–∞–¥–∞—á ===")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
        mock_task.delay.return_value = Mock(id='test-task-id-123')
        
        # –ë–µ—Ä–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file = test_audio_files['short_ru'][0]
        
        with open(test_file, 'rb') as f:
            audio_data = f.read()
        
        uploaded_file = SimpleUploadedFile(
            name=Path(test_file).name,
            content=audio_data,
            content_type='audio/wav'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = django_client.post(
            '/api/audio-to-text/',
            data={
                'engine': 'whisper',
                'language': 'ru-RU',
                'quality': 'standard',
                'output_format': 'text'
            },
            files={'audio': uploaded_file}
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        assert response.status_code == 200
        result = response.json()
        
        if result.get('async', False):
            assert 'task_id' in result
            print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {result['task_id']}")
        else:
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        print("‚úÖ STT –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_task_status_checking(self, django_client):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ API"""
        print("\n=== –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á ===")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è AsyncResult
        with patch('converter_site.views.AsyncResult') as mock_async_result:
            mock_result = Mock()
            mock_result.state = 'SUCCESS'
            mock_result.result = {
                'text': '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
                'duration': 15.5,
                'language': 'ru-RU'
            }
            mock_async_result.return_value = mock_result
            
            response = django_client.get('/api/task-status/test-task-123/')
            
            assert response.status_code == 200
            result = response.json()
            
            assert result['success'] is True
            assert result['status'] == 'completed'
            assert 'result' in result
            
            print("‚úÖ API –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_task_cancellation(self, django_client):
        """–¢–µ—Å—Ç 7: –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ API"""
        print("\n=== –¢–µ—Å—Ç 7: –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á ===")
        
        with patch('converter_site.views.app') as mock_app:
            mock_app.control.revoke.return_value = None
            
            response = django_client.post('/api/cancel-task/test-task-456/')
            
            assert response.status_code == 200
            result = response.json()
            
            assert result['success'] is True
            assert 'task_id' in result
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ revoke –±—ã–ª –≤—ã–∑–≤–∞–Ω
            mock_app.control.revoke.assert_called_once_with('test-task-456', terminate=True)
            
            print("‚úÖ –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


class TestCeleryQueues:
    """–¢–µ—Å—Ç—ã –æ—á–µ—Ä–µ–¥–µ–π Celery"""
    
    def test_task_routing(self, celery_helper):
        """–¢–µ—Å—Ç 8: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ –æ—á–µ—Ä–µ–¥—è–º"""
        print("\n=== –¢–µ—Å—Ç 8: –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑ Django settings
        if hasattr(settings, 'CELERY_TASK_ROUTES'):
            routes = settings.CELERY_TASK_ROUTES
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
            expected_routes = [
                'converter_site.tasks.convert_audio_to_text',
                'converter_site.tasks.create_gif_from_images',
                'converter_site.tasks.cleanup_old_files'
            ]
            
            for route in expected_routes:
                if route in routes:
                    queue_name = routes[route]['queue']
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ {route} –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å: {queue_name}")
                else:
                    print(f"‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è {route} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ö†Ô∏è CELERY_TASK_ROUTES –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def test_queue_priorities(self, celery_helper):
        """–¢–µ—Å—Ç 9: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ—á–µ—Ä–µ–¥–µ–π"""
        print("\n=== –¢–µ—Å—Ç 9: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ—á–µ—Ä–µ–¥–µ–π ===")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        @celery_helper.app.task(name="high_priority_task")
        def high_priority_task():
            return {"priority": "high", "processed_at": time.time()}
        
        @celery_helper.app.task(name="low_priority_task")
        def low_priority_task():
            return {"priority": "low", "processed_at": time.time()}
        
        # –í eager mode –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–µ –≤–ª–∏—è—é—Ç, –Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        high_result = high_priority_task.apply_async(priority=9)
        low_result = low_priority_task.apply_async(priority=1)
        
        assert high_result.ready()
        assert low_result.ready()
        
        high_data = high_result.get()
        low_data = low_result.get()
        
        assert high_data['priority'] == 'high'
        assert low_data['priority'] == 'low'
        
        print("‚úÖ –ó–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


class TestCeleryWorkers:
    """–¢–µ—Å—Ç—ã –≤–æ—Ä–∫–µ—Ä–æ–≤ Celery"""
    
    def test_worker_configuration(self):
        """–¢–µ—Å—Ç 10: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        print("\n=== –¢–µ—Å—Ç 10: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤ ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏–∑ Django settings
        worker_settings = {
            'CELERY_WORKER_PREFETCH_MULTIPLIER': getattr(settings, 'CELERY_WORKER_PREFETCH_MULTIPLIER', None),
            'CELERY_WORKER_MAX_TASKS_PER_CHILD': getattr(settings, 'CELERY_WORKER_MAX_TASKS_PER_CHILD', None),
            'CELERY_TASK_SOFT_TIME_LIMIT': getattr(settings, 'CELERY_TASK_SOFT_TIME_LIMIT', None),
            'CELERY_TASK_TIME_LIMIT': getattr(settings, 'CELERY_TASK_TIME_LIMIT', None),
        }
        
        for setting_name, value in worker_settings.items():
            if value is not None:
                print(f"‚úÖ {setting_name}: {value}")
            else:
                print(f"‚ö†Ô∏è {setting_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    
    def test_worker_health_check(self, celery_helper):
        """–¢–µ—Å—Ç 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        print("\n=== –¢–µ—Å—Ç 11: –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Ä–∫–µ—Ä–æ–≤ ===")
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ—Ä–∫–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º app
        app = celery_helper.app
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ app –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ
        assert app is not None
        assert hasattr(app, 'tasks')
        assert hasattr(app, 'conf')
        
        print("‚úÖ Celery app –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä (–≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
        try:
            inspect = app.control.inspect()
            if inspect:
                print("‚úÖ –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä Celery –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print("‚ö†Ô∏è –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä Celery –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞: {e} (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)")


class TestCeleryMonitoring:
    """–¢–µ—Å—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Celery"""
    
    def test_task_events(self, celery_helper):
        """–¢–µ—Å—Ç 12: –°–æ–±—ã—Ç–∏—è –∑–∞–¥–∞—á"""
        print("\n=== –¢–µ—Å—Ç 12: –°–æ–±—ã—Ç–∏—è –∑–∞–¥–∞—á ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±—ã—Ç–∏–π
        send_events = getattr(settings, 'CELERY_SEND_EVENTS', None)
        send_task_events = getattr(settings, 'CELERY_WORKER_SEND_TASK_EVENTS', None)
        
        if send_events:
            print(f"‚úÖ CELERY_SEND_EVENTS: {send_events}")
        if send_task_events:
            print(f"‚úÖ CELERY_WORKER_SEND_TASK_EVENTS: {send_task_events}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
        test_task = celery_helper.create_test_task()
        result = test_task.delay({'test': 'events'})
        
        # –í eager mode —Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        assert result.ready()
        print("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—Å–æ–±—ã—Ç–∏—è –≤ eager mode)")
    
    def test_result_backend(self, celery_helper):
        """–¢–µ—Å—Ç 13: Backend —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n=== –¢–µ—Å—Ç 13: Backend —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===")
        
        app = celery_helper.app
        backend = app.backend
        
        assert backend is not None
        print(f"‚úÖ Result backend: {type(backend).__name__}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        test_task = celery_helper.create_test_task()
        result = test_task.delay({'backend_test': True})
        
        task_id = result.id
        assert task_id is not None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ ID
        retrieved_result = AsyncResult(task_id, app=app)
        assert retrieved_result.ready()
        
        print("‚úÖ Backend —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


class TestCeleryStressTests:
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã Celery"""
    
    def test_multiple_tasks_execution(self, celery_helper):
        """–¢–µ—Å—Ç 14: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        print("\n=== –¢–µ—Å—Ç 14: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ ===")
        
        test_task = celery_helper.create_test_task()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        num_tasks = 5
        results = []
        
        for i in range(num_tasks):
            result = test_task.delay({'task_number': i})
            results.append(result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results):
            assert result.ready()
            assert result.successful()
            
            task_result = result.get()
            assert task_result['input_data']['task_number'] == i
        
        print(f"‚úÖ {num_tasks} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    def test_task_retry_mechanism(self, celery_helper):
        """–¢–µ—Å—Ç 15: –ú–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
        print("\n=== –¢–µ—Å—Ç 15: –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ ===")
        
        retry_count = 0
        
        @celery_helper.app.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 3})
        def retry_task(self, should_fail=True):
            nonlocal retry_count
            retry_count += 1
            
            if should_fail and retry_count < 3:
                raise Exception(f"Retry attempt {retry_count}")
            
            return {'retry_count': retry_count, 'status': 'success'}
        
        # –í eager mode –ø–æ–≤—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É, –Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É
        result = retry_task.delay(should_fail=False)  # –ù–µ –ø–∞–¥–∞–µ–º —Å—Ä–∞–∑—É
        
        assert result.ready()
        task_result = result.get()
        
        assert task_result['status'] == 'success'
        print("‚úÖ –ú–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


def test_celery_integration_comprehensive(celery_helper, django_client, test_audio_files):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Celery + API"""
    print("\n=== –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç ===")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    assert hasattr(settings, 'CELERY_BROKER_URL')
    print("‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Celery –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
    test_file = test_audio_files['short_ru'][0]
    
    with open(test_file, 'rb') as f:
        audio_data = f.read()
    
    uploaded_file = SimpleUploadedFile(
        name=Path(test_file).name,
        content=audio_data,
        content_type='audio/wav'
    )
    
    with patch('converter_site.tasks.convert_audio_to_text') as mock_task:
        mock_task.delay.return_value = Mock(id='integration-test-task')
        
        response = django_client.post(
            '/api/audio-to-text/',
            data={
                'engine': 'whisper',
                'language': 'ru-RU',
                'quality': 'high',
                'output_format': 'json',
                'include_timestamps': 'true'
            },
            files={'audio': uploaded_file}
        )
        
        assert response.status_code == 200
        result = response.json()
        assert result.get('success', False)
        print("‚úÖ API —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
    with patch('converter_site.views.AsyncResult') as mock_async:
        mock_result = Mock()
        mock_result.state = 'SUCCESS'
        mock_result.result = {
            'text': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ',
            'segments': [{'start': 0, 'end': 5, 'text': '–¢–µ—Å—Ç'}]
        }
        mock_async.return_value = mock_result
        
        status_response = django_client.get('/api/task-status/integration-test-task/')
        assert status_response.status_code == 200
        
        status_result = status_response.json()
        assert status_result['success'] is True
        assert status_result['status'] == 'completed'
        print("‚úÖ API –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    print("üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ pytest —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    pytest.main([
        __file__, 
        '-v',  # –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        '-s',  # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å print'—ã
        '--tb=short',  # –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç—Ä–µ–π—Å–±–µ–∫–∏
        '--color=yes',  # —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
    ])
