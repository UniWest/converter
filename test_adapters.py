#!/usr/bin/env python
import sys
import tempfile
"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–ª–æ—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤.
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_path = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_path)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'converter_site.settings')

try:
    import django
    django.setup()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Django: {e}")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
try:
    from converter.adapters import engine_manager, VideoEngine, ImageEngine, AudioEngine, DocumentEngine, ArchiveEngine
    from converter.adapters.base import ConversionResult
    print("[OK] –ê–¥–∞–ø—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    print(f"[X] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤: {e}")
    sys.exit(1)


def test_engine_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤."""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EngineManager ===")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
    video_engine = engine_manager.get_engine('video')
    assert video_engine is not None, "VideoEngine –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è"
    print("‚úì VideoEngine —Å–æ–∑–¥–∞–Ω")
    
    image_engine = engine_manager.get_engine('image')
    assert image_engine is not None, "ImageEngine –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è"
    print("‚úì ImageEngine —Å–æ–∑–¥–∞–Ω")
    
    # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    assert engine_manager.detect_engine_type('video.mp4') == 'video'
    assert engine_manager.detect_engine_type('image.jpg') == 'image'
    assert engine_manager.detect_engine_type('audio.mp3') == 'audio'
    assert engine_manager.detect_engine_type('document.pdf') == 'document'
    assert engine_manager.detect_engine_type('archive.zip') == 'archive'
    assert engine_manager.detect_engine_type('archive.tar.gz') == 'archive'
    print("‚úì –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    status = engine_manager.get_engine_status()
    assert isinstance(status, dict), "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
    assert 'video' in status, "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–∏–¥–µ–æ –∞–¥–∞–ø—Ç–µ—Ä"
    print("‚úì –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    formats = engine_manager.get_supported_formats()
    assert isinstance(formats, dict), "–§–æ—Ä–º–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
    print("‚úì –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_video_engine():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VideoEngine."""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VideoEngine ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞
    video_engine = VideoEngine(use_moviepy=True)
    print("‚úì VideoEngine —Å–æ–∑–¥–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    formats = video_engine.get_supported_formats()
    assert 'input' in formats and 'output' in formats
    assert 'mp4' in formats['input']
    assert 'gif' in formats['output']
    print("‚úì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    assert video_engine.validate_input(type('MockFile', (), {'name': 'test.mp4'})())
    assert not video_engine.validate_input(type('MockFile', (), {'name': 'test.txt'})())
    print("‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    deps = video_engine.check_dependencies()
    assert isinstance(deps, dict)
    print(f"‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {deps}")


def test_other_engines():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤."""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ ===")
    
    engines = [
        ('image', ImageEngine),
        ('audio', AudioEngine),
        ('document', DocumentEngine),
        ('archive', ArchiveEngine)
    ]
    
    for engine_name, engine_class in engines:
        print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {engine_name}:")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞
        engine = engine_class()
        print(f"  ‚úì {engine_class.__name__} —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        formats = engine.get_supported_formats()
        assert 'input' in formats and 'output' in formats
        assert len(formats['input']) > 0
        assert len(formats['output']) > 0
        print(f"  ‚úì –§–æ—Ä–º–∞—Ç—ã: {len(formats['input'])} –≤—Ö–æ–¥–Ω—ã—Ö, {len(formats['output'])} –≤—ã—Ö–æ–¥–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        deps = engine.check_dependencies()
        assert isinstance(deps, dict)
        print(f"  ‚úì –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {list(deps.keys())}")


def test_conversion_result():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConversionResult."""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConversionResult ===")
    
    # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = ConversionResult(
        success=True,
        output_path="/path/to/output.gif",
        metadata={"duration": 10}
    )
    assert result.success is True
    assert result.output_path == "/path/to/output.gif"
    assert result.metadata["duration"] == 10
    print("‚úì –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
    error_result = ConversionResult(
        success=False,
        error_message="Test error"
    )
    assert error_result.success is False
    assert error_result.error_message == "Test error"
    assert error_result.metadata == {}  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    print("‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def print_engine_status():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤."""
    print("\n=== –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ ===")
    
    status = engine_manager.get_engine_status()
    
    for engine_type, info in status.items():
        print(f"\n{engine_type.upper()}:")
        print(f"  –î–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if info['available'] else '–ù–µ—Ç'}")
        
        print("  –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        for dep_name, dep_status in info['dependencies'].items():
            status_text = "‚úì" if dep_status else "‚úó"
            print(f"    {status_text} {dep_name}")
        
        formats = info['supported_formats']
        print(f"  –í—Ö–æ–¥–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: {len(formats['input'])}")
        print(f"  –í—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: {len(formats['output'])}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–ª–æ—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–≤")
    print("=" * 50)
    
    try:
        test_conversion_result()
        test_engine_manager()
        test_video_engine()
        test_other_engines()
        print_engine_status()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("- –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("- –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("- VideoEngine –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º VideoConverter")
        print("- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
