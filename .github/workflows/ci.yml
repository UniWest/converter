name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt

    - name: Run Black formatting check
      run: |
        black --check --diff .

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff .

    - name: Run flake8 linting
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run mypy type checking
      run: |
        mypy converter/ converter_site/ --ignore-missing-imports
      continue-on-error: true  # Type checking is informational for now

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libsndfile1 sox

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-django
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        cp .env.example .env
        echo "CELERY_BROKER_URL=redis://localhost:6379/0" >> .env
        echo "CELERY_RESULT_BACKEND=redis://localhost:6379/0" >> .env
        echo "FFMPEG_BINARY=ffmpeg" >> .env

    - name: Run database migrations
      run: |
        python manage.py migrate --noinput
        python manage.py collectstatic --noinput

    - name: Run unit tests
      run: |
        python -m pytest tests/ -m "unit" -v --tb=short --cov=converter --cov-report=xml

    - name: Run integration tests
      run: |
        python -m pytest tests/ -m "integration" -v --tb=short
      continue-on-error: true  # Integration tests may be flaky in CI

    - name: Run Django tests
      run: |
        python manage.py test --verbosity=2

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: media-converter:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm --name test-container -d -p 8000:8000 media-converter:test
        sleep 10  # Wait for container to start
        
        # Test if the application is responding
        curl -f http://localhost:8000/ || exit 1
        
        # Cleanup
        docker stop test-container

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt

    - name: Run Bandit security scan
      run: |
        bandit -r converter/ converter_site/ -f json -o bandit-report.json
        bandit -r converter/ converter_site/
      continue-on-error: true

    - name: Run Safety vulnerability check
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
