# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
–ê–Ω–∞–ª–æ–≥ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ Convertio –¥–ª—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import os
import sys
import subprocess
import importlib
from pathlib import Path

def check_python_packages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤ –∏–∑ requirements.txt"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤:")
    print("-" * 40)
    
    required_packages = [
        'django', 'celery', 'redis', 'Wand', 'magic', 'cv2', 
        'numpy', 'PIL', 'pydub', 'docx', 'openpyxl', 'pptx'
    ]
    
    status = {}
    for package in required_packages:
        try:
            if package == 'magic':
                import magic
                status[package] = "‚úÖ –û–ö"
            elif package == 'cv2':
                import cv2
                status[package] = "‚úÖ –û–ö" 
            elif package == 'PIL':
                from PIL import Image
                status[package] = "‚úÖ –û–ö"
            else:
                importlib.import_module(package)
                status[package] = "‚úÖ –û–ö"
        except ImportError:
            status[package] = "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
    
    for package, result in status.items():
        print(f"  {package:15} | {result}")
    
    return all("‚úÖ" in status for status in status.values())

def check_external_binaries():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —É—Ç–∏–ª–∏—Ç:")
    print("-" * 40)
    
    from converter_settings import BINARY_PATHS, check_binary_availability
    
    status = check_binary_availability()
    all_ok = True
    
    for name, info in status.items():
        if info['available'] and info['executable']:
            result = "‚úÖ –û–ö"
        else:
            result = "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
            all_ok = False
        
        print(f"  {name:15} | {result}")
        if not info['available']:
            print(f"     –ü—É—Ç—å: {info['path']}")
    
    return all_ok

def check_redis_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis:")
    print("-" * 40)
    
    try:
        import redis
        from converter_settings import REDIS_URL
        
        # –ü–∞—Ä—Å–∏–º URL Redis
        if REDIS_URL.startswith('redis://'):
            parts = REDIS_URL.replace('redis://', '').split('/')
            host_port = parts[0].split(':')
            host = host_port[0] if host_port[0] else 'localhost'
            port = int(host_port[1]) if len(host_port) > 1 else 6379
            db = int(parts[1]) if len(parts) > 1 else 0
        else:
            host, port, db = 'localhost', 6379, 0
        
        r = redis.Redis(host=host, port=port, db=db, decode_responses=True)
        r.ping()
        print("  Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ | ‚úÖ –û–ö")
        return True
        
    except Exception as e:
        print(f"  Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ | ‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False

def check_directories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
    print("-" * 40)
    
    from converter_settings import TEMP_DIRS
    
    all_ok = True
    for dir_name, dir_path in TEMP_DIRS.items():
        path = Path(dir_path)
        
        if not path.exists():
            try:
                path.mkdir(parents=True, exist_ok=True)
                print(f"  {dir_name:15} | ‚úÖ –°–û–ó–î–ê–ù: {dir_path}")
            except Exception as e:
                print(f"  {dir_name:15} | ‚ùå –û–®–ò–ë–ö–ê: {e}")
                all_ok = False
        else:
            print(f"  {dir_name:15} | ‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢: {dir_path}")
    
    return all_ok

def check_disk_space():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ"""
    print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞:")
    print("-" * 40)
    
    try:
        import shutil
        total, used, free = shutil.disk_usage(".")
        
        gb = 1024 ** 3
        print(f"  –í—Å–µ–≥–æ –º–µ—Å—Ç–∞     | {total // gb:3d} GB")
        print(f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ    | {used // gb:3d} GB") 
        print(f"  –°–≤–æ–±–æ–¥–Ω–æ        | {free // gb:3d} GB")
        
        if free > 5 * gb:  # –ú–∏–Ω–∏–º—É–º 5GB —Å–≤–æ–±–æ–¥–Ω–æ
            print("  –°—Ç–∞—Ç—É—Å          | ‚úÖ –î–û–°–¢–ê–¢–û–ß–ù–û")
            return True
        else:
            print("  –°—Ç–∞—Ç—É—Å          | ‚ö†Ô∏è  –ú–ê–õ–û –ú–ï–°–¢–ê")
            return False
            
    except Exception as e:
        print(f"  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ | ‚ùå {e}")
        return False

def run_basic_tests():
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüß™ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã:")
    print("-" * 40)
    
    tests_passed = 0
    total_tests = 4
    
    # –¢–µ—Å—Ç 1: ImageMagick
    try:
        from converter_settings import BINARY_PATHS
        magick_path = BINARY_PATHS['magick']
        result = subprocess.run([magick_path, '-version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("  ImageMagick      | ‚úÖ –û–ö")
            tests_passed += 1
        else:
            print("  ImageMagick      | ‚ùå –û–®–ò–ë–ö–ê")
    except Exception:
        print("  ImageMagick      | ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    
    # –¢–µ—Å—Ç 2: FFmpeg
    try:
        ffmpeg_path = BINARY_PATHS['ffmpeg']
        result = subprocess.run([ffmpeg_path, '-version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("  FFmpeg           | ‚úÖ –û–ö")
            tests_passed += 1
        else:
            print("  FFmpeg           | ‚ùå –û–®–ò–ë–ö–ê")
    except Exception:
        print("  FFmpeg           | ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    
    # –¢–µ—Å—Ç 3: LibreOffice
    try:
        soffice_path = BINARY_PATHS['soffice']
        result = subprocess.run([soffice_path, '--help'], 
                              capture_output=True, text=True, timeout=15)
        if result.returncode == 0:
            print("  LibreOffice      | ‚úÖ –û–ö")
            tests_passed += 1
        else:
            print("  LibreOffice      | ‚ùå –û–®–ò–ë–ö–ê")
    except Exception:
        print("  LibreOffice      | ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    
    # –¢–µ—Å—Ç 4: 7-Zip  
    try:
        zip_path = BINARY_PATHS['7z']
        result = subprocess.run([zip_path], 
                              capture_output=True, text=True, timeout=10)
        # 7z –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ 1 –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if result.returncode in [0, 1]:
            print("  7-Zip            | ‚úÖ –û–ö")
            tests_passed += 1
        else:
            print("  7-Zip            | ‚ùå –û–®–ò–ë–ö–ê")
    except Exception:
        print("  7-Zip            | ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
    
    return tests_passed, total_tests

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø –§–ê–ô–õ–û–í–û–ì–û –ö–û–ù–í–ï–†–¢–ï–†–ê")
    print("=" * 50)
    
    checks = [
        ("Python –ø–∞–∫–µ—Ç—ã", check_python_packages),
        ("–í–Ω–µ—à–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã", check_external_binaries), 
        ("Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", check_redis_connection),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", check_directories),
        ("–ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ", check_disk_space),
    ]
    
    results = []
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ '{name}': {e}")
            results.append((name, False))
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    tests_passed, total_tests = run_basic_tests()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    
    passed_checks = sum(1 for _, result in results if result)
    total_checks = len(results)
    
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–ê" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–ê"
        print(f"  {name:20} | {status}")
    
    print(f"\n–¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π:      {tests_passed}/{total_tests} –ø—Ä–æ–π–¥–µ–Ω–æ")
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {passed_checks}/{total_checks} –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_checks == total_checks and tests_passed == total_tests:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print("\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
