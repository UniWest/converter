#!/usr/bin/env python
"""
Smoke test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import sys
import django

# Django setup
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'converter_site.settings')
sys.path.insert(0, os.path.dirname(__file__))
django.setup()

from django.test import TestCase, Client
from django.urls import reverse
from django.core.files.uploadedfile import SimpleUploadedFile
from PIL import Image
import io


class SmokeTest(TestCase):
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def setUp(self):
        self.client = Client()
    
    def test_django_setup(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django"""
        from django.conf import settings
        self.assertTrue(settings.configured)
        print("‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_database_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        from django.db import connection
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            self.assertEqual(result[0], 1)
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            self.fail(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
    
    def test_models_import(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π"""
        try:
            from converter.models import ConversionTask
            print("‚úÖ –ú–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            self.fail(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}")
    
    def test_celery_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Celery"""
        try:
            from celery_app import app as celery_app
            self.assertIsNotNone(celery_app)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Celery –≤ —Ä–µ–∂–∏–º–µ eager –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            self.assertTrue(celery_app.conf.task_always_eager)
            print("‚úÖ Celery –Ω–∞—Å—Ç—Ä–æ–µ–Ω (eager mode –¥–ª—è —Ç–µ—Å—Ç–æ–≤)")
        except Exception as e:
            print(f"‚ö†Ô∏è Celery: {e}")
    
    def test_adapters_import(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤"""
        try:
            from converter.adapters.engine_manager import EngineManager
            manager = EngineManager()
            self.assertIsNotNone(manager)
            print("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –ê–¥–∞–ø—Ç–µ—Ä—ã: {e}")
    
    def test_image_processing(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (100, 100), color='red')
            img_io = io.BytesIO()
            img.save(img_io, format='PNG')
            img_io.seek(0)
            
            test_file = SimpleUploadedFile(
                "test.png", 
                img_io.getvalue(), 
                content_type="image/png"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
            self.assertGreater(len(test_file.read()), 0)
            print("‚úÖ –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")


def run_smoke_tests():
    """–ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    test_instance = SmokeTest()
    test_instance.setUp()
    
    tests = [
        'test_django_setup',
        'test_database_connection', 
        'test_models_import',
        'test_celery_config',
        'test_adapters_import',
        'test_image_processing'
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name in tests:
        try:
            test_method = getattr(test_instance, test_name)
            test_method()
            passed += 1
        except Exception as e:
            print(f"‚ùå {test_name}: {e}")
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return False


if __name__ == '__main__':
    success = run_smoke_tests()
    sys.exit(0 if success else 1)
