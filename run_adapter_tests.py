#!/usr/bin/env python
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.
–ó–∞–ø—É—Å–∫–∞–µ—Ç unit-—Ç–µ—Å—Ç—ã, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ —Ç–µ—Å—Ç—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏.
"""

import os
import sys
import subprocess
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_path = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_path)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'converter_site.settings')

try:
    import django
    django.setup()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Django: {e}")
    sys.exit(1)


def print_header(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞."""
    print("\n" + "=" * 70)
    print(f"  {text}")
    print("=" * 70)


def print_separator():
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å."""
    print("-" * 70)


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    print_header("–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    
    dependencies = {
        'Django': 'django',
        'PIL/Pillow': 'PIL',
        'unittest': 'unittest',
    }
    
    available = {}
    
    for name, module in dependencies.items():
        try:
            __import__(module)
            available[name] = True
            print(f"‚úì {name} - –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            available[name] = False
            print(f"‚úó {name} - –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    external_tools = {
        'ffmpeg': '–≤–∏–¥–µ–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è',
        'git': '—Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π'
    }
    
    print("\n–í–Ω–µ—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    for tool, description in external_tools.items():
        import shutil
        if shutil.which(tool):
            print(f"‚úì {tool} - –¥–æ—Å—Ç—É–ø–µ–Ω ({description})")
            available[tool] = True
        else:
            print(f"‚úó {tool} - –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω ({description})")
            available[tool] = False
    
    return available


def run_test_file(test_file, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Ç–µ—Å—Ç–æ–≤."""
    print_separator()
    print(f"üß™ –ó–∞–ø—É—Å–∫: {description}")
    print(f"   –§–∞–π–ª: {test_file}")
    print_separator()
    
    if not Path(test_file).exists():
        print(f"‚ùå –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return False
    
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∫–∞–∫ subprocess
        result = subprocess.run(
            [sys.executable, test_file],
            capture_output=True,
            text=True,
            cwd=project_path
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(result.stdout)
        
        if result.stderr:
            print("STDERR:")
            print(result.stderr)
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û ({duration:.2f}—Å)")
            return True
        else:
            print(f"‚ùå {description} - –ü–†–û–í–ê–õ (–∫–æ–¥: {result.returncode}, {duration:.2f}—Å)")
            return False
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {description}: {e}")
        return False


def run_quick_validation():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    print_header("–ë–´–°–¢–†–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø")
    
    try:
        from converter.adapters import engine_manager
        from converter.adapters.base import ConversionResult
        
        print("‚úì –ò–º–ø–æ—Ä—Ç –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ —É—Å–ø–µ—à–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = engine_manager
        print("‚úì –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
        video_engine = manager.get_engine('video')
        image_engine = manager.get_engine('image')
        
        if video_engine and image_engine:
            print("‚úì –û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
        test_files = {
            'video.mp4': 'video',
            'image.jpg': 'image',
            'audio.mp3': 'audio'
        }
        
        for filename, expected in test_files.items():
            detected = manager.detect_engine_type(filename)
            if detected == expected:
                print(f"‚úì {filename} ‚Üí {detected}")
            else:
                print(f"‚ö†Ô∏è {filename} ‚Üí {detected} (–æ–∂–∏–¥–∞–ª—Å—è {expected})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False


def generate_test_report(results):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∞—Ö."""
    print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    
    total_tests = len(results)
    passed_tests = sum(1 for r in results.values() if r)
    failed_tests = total_tests - passed_tests
    
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç-–Ω–∞–±–æ—Ä–æ–≤: {total_tests}")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {passed_tests}")
    print(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {passed_tests/total_tests*100:.1f}%")
    
    print(f"\nüìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:")
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   ‚Ä¢ {test_name}: {status}")
    
    if all(results.values()):
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ê–î–ê–ü–¢–ï–†–û–í –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ.")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print_header("–ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–î–ê–ü–¢–ï–†–û–í –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò")
    print("–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ unit-—Ç–µ—Å—Ç–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    
    start_time = time.time()
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    dependencies = check_dependencies()
    
    # 2. –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not run_quick_validation():
        print("‚ùå –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return 1
    
    # 3. –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    test_suite = [
        ('test_adapters.py', '–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∞–¥–∞–ø—Ç–µ—Ä–æ–≤'),
        ('test_adapter_units.py', 'Unit-—Ç–µ—Å—Ç—ã –∞–¥–∞–ø—Ç–µ—Ä–æ–≤'),
        ('test_adapter_integrations.py', '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã'),
        ('test_small_files.py', '–¢–µ—Å—Ç—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏'),
    ]
    
    # 4. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = {}
    
    for test_file, description in test_suite:
        results[description] = run_test_file(test_file, description)
    
    # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    end_time = time.time()
    total_duration = end_time - start_time
    
    success = generate_test_report(results)
    
    print(f"\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_duration:.2f} —Å–µ–∫—É–Ω–¥")
    
    if success:
        print("\nüöÄ –ê–¥–∞–ø—Ç–µ—Ä—ã –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return 0
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤.")
        return 1


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
