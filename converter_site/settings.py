"""
Django settings for converter_site project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-pil_my+-p)h2j$x_d4k2bas!1af0#hyucn12rso=#ka$iiv$b(')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# ALLOWED_HOSTS configuration
# Default to allow all hosts in development, specific hosts in production
if DEBUG:
    ALLOWED_HOSTS = ['*']  # Allow all hosts in debug mode
else:
    # Production hosts - add your deployment URLs here
    ALLOWED_HOSTS = [
        'converter-ptzm.onrender.com',  # Your Render URL
        '127.0.0.1',
        'localhost',
    ]
    # Also accept hosts from environment variable
    env_hosts = config('ALLOWED_HOSTS', default='', cast=str)
    if env_hosts:
        additional_hosts = [s.strip() for s in env_hosts.split(',') if s.strip()]
        ALLOWED_HOSTS.extend(additional_hosts)

# Production security settings
if not DEBUG:
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=True, cast=bool)
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = config('SECURE_HSTS_SECONDS', default=31536000, cast=int)  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Security headers for all environments
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin-allow-popups'
SECURE_REFERRER_POLICY = 'same-origin'

# Development specific settings
if DEBUG:
    # For development, be less restrictive with security headers
    SECURE_CROSS_ORIGIN_OPENER_POLICY = None  # Disable for localhost development

# ===================
# CORS AND CSRF CONFIGURATION
# ===================

# CORS settings for external origins
CORS_ALLOWED_ORIGINS = [
    "https://user740764150-wdjyqhj4.tunnel.vk-apps.com",
    "https://converter-ptzm.onrender.com",  # Add Render URL
]

# Alternative: Allow all subdomains with regex (uncomment if needed)
# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^https://.*\.tunnel\.vk-apps\.com$",
# ]

# CSRF trusted origins - configurable for different environments
CSRF_TRUSTED_ORIGINS = [
    "https://user740764150-wdjyqhj4.tunnel.vk-apps.com",
    "https://converter-ptzm.onrender.com",  # Add Render URL
    "http://converter-ptzm.onrender.com",   # Add HTTP version for initial setup
]
# Also accept from environment variable
env_csrf_origins = config('CSRF_TRUSTED_ORIGINS', default='', cast=str)
if env_csrf_origins:
    additional_csrf_origins = [s.strip() for s in env_csrf_origins.split(',') if s.strip()]
    CSRF_TRUSTED_ORIGINS.extend(additional_csrf_origins)

# CORS headers for websockets (if needed)
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Allow credentials (cookies, authentication)
CORS_ALLOW_CREDENTIALS = True

# Allow common HTTP methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',  # django-cors-headers
    # 'django_celery_beat',  # Отключено - пакет не установлен
    'converter',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # WhiteNoise for static files
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware after SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'converter_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'converter_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Default sqlite; override with DATABASE_URL (Render/Railway provide Postgres URL)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# If DATABASE_URL is set, use it
DATABASE_URL = config('DATABASE_URL', default='')
if DATABASE_URL:
    try:
        import dj_database_url  # type: ignore
        DATABASES['default'] = dj_database_url.parse(DATABASE_URL, conn_max_age=600, ssl_require=not DEBUG)
    except Exception:
        pass


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Enhanced Audio Processing Settings
try:
    from .production_audio_settings import *
except ImportError:
    # Fallback settings if production_audio_settings.py doesn't exist
    WHISPER_MODEL = 'base'
    WHISPER_DEVICE = 'cpu'
    WHISPER_COMPUTE_TYPE = 'int8'
    AUDIO_MAX_DURATION = 3600
    AUDIO_MAX_FILE_SIZE = 100
    CONCURRENT_AUDIO_JOBS = 2
USE_I18N = True

USE_TZ = True


# ===================
# STATIC FILES CONFIGURATION
# ===================

STATIC_URL = config('STATIC_URL', default='/static/')
STATIC_ROOT = BASE_DIR / config('STATIC_ROOT', default='staticfiles')
STATICFILES_DIRS = [BASE_DIR / 'static']

# WhiteNoise configuration for serving static files
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# ===================
# MEDIA FILES CONFIGURATION
# ===================

MEDIA_URL = config('MEDIA_URL', default='/media/')
MEDIA_ROOT = BASE_DIR / config('MEDIA_ROOT', default='media')

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = config('FILE_UPLOAD_MAX_MEMORY_SIZE', default=10, cast=int) * 1024 * 1024  # 10MB default
DATA_UPLOAD_MAX_MEMORY_SIZE = config('DATA_UPLOAD_MAX_MEMORY_SIZE', default=10, cast=int) * 1024 * 1024  # 10MB default
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Secure media serving in production
if not DEBUG:
    # Use S3/CloudFlare/nginx for media in production
    # Example S3 configuration (uncomment and configure when needed)
    # DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    # AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID', default='')
    # AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY', default='')
    # AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default='')
    # AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default='us-east-1')
    # AWS_S3_CUSTOM_DOMAIN = config('AWS_S3_CUSTOM_DOMAIN', default='')
    # AWS_DEFAULT_ACL = None
    # AWS_S3_OBJECT_PARAMETERS = {
    #     'CacheControl': 'max-age=86400',
    # }
    pass  # Media will be served by nginx/reverse proxy in production

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# FFmpeg configuration
# Default to system ffmpeg on Linux/Docker, fallback to Windows path
if os.name == 'posix':  # Linux/Unix/Docker
    FFMPEG_BINARY = config('FFMPEG_BINARY', default='ffmpeg')
else:  # Windows
    FFMPEG_BINARY = config('FFMPEG_BINARY', default=r'C:\ffmpeg\ffmpeg-7.1.1-essentials_build\bin\ffmpeg.exe')

# ===================
# UPLOAD SIZE LIMITS
# ===================

# Maximum file upload sizes
MAX_UPLOAD_SIZE = config('MAX_UPLOAD_SIZE', default=100, cast=int) * 1024 * 1024  # MB to bytes
VIDEO_PROCESSING_TIMEOUT = config('VIDEO_PROCESSING_TIMEOUT', default=300, cast=int)  # seconds
AUDIO_MAX_DURATION = config('AUDIO_MAX_DURATION', default=3600, cast=int)  # seconds

# Apply upload size limits to Django
FILE_UPLOAD_MAX_MEMORY_SIZE = min(FILE_UPLOAD_MAX_MEMORY_SIZE, MAX_UPLOAD_SIZE)
DATA_UPLOAD_MAX_MEMORY_SIZE = min(DATA_UPLOAD_MAX_MEMORY_SIZE, MAX_UPLOAD_SIZE)

# ===================
# STT НАСТРОЙКИ
# ===================

# Движок распознавания речи
STT_ENGINE = config('STT_ENGINE', default='whisper')
# Возможные значения: 'whisper', 'google'

# Настройки Whisper (faster-whisper)
WHISPER_MODEL = config('WHISPER_MODEL', default='base')
WHISPER_DEVICE = config('WHISPER_DEVICE', default='auto')
WHISPER_COMPUTE_TYPE = config('WHISPER_COMPUTE_TYPE', default='int8')

# Языки для автоопределения в Whisper
WHISPER_AUTO_LANGUAGES = ['ru', 'en', 'es', 'fr', 'de', 'it', 'pt', 'zh', 'ja', 'ko']

# Настройки предобработки аудио
AUDIO_PREPROCESSING = {
    'normalize': True,
    'noise_reduction': True,
    'high_pass_filter': 300,  # Гц
    'low_pass_filter': 3400,  # Гц
    'silence_threshold': -40,  # dBFS
    'min_silence_len': 1000,  # мс
    'keep_silence': 500,  # мс
}

# Celery Configuration disabled for development

# ========================
# КОНФИГУРАЦИЯ CELERY (ОТКЛЮЧЕНО ДЛЯ РАЗРАБОТКИ)
# ========================

# Выполняем задачи синхронно без Redis/Celery
CELERY_TASK_ALWAYS_EAGER = True
CELERY_TASK_EAGER_PROPAGATES = True

# Отключаем брокер и backend
CELERY_BROKER_URL = None
CELERY_RESULT_BACKEND = None

# Продакшен настройки (закомментированы)
# CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
# CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')

# Дополнительные настройки Celery (отключены в dev режиме)
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TIMEZONE = TIME_ZONE
# CELERY_ENABLE_UTC = True
# CELERY_WORKER_PREFETCH_MULTIPLIER = 1
# CELERY_TASK_ACKS_LATE = True
# CELERY_WORKER_MAX_TASKS_PER_CHILD = 50
# CELERY_TASK_SOFT_TIME_LIMIT = 3600  
# CELERY_TASK_TIME_LIMIT = 7200       
# CELERY_WORKER_SEND_TASK_EVENTS = True
# CELERY_TASK_SEND_SENT_EVENT = True
# CELERY_RESULT_EXPIRES = 3600  
# CELERY_TASK_TRACK_STARTED = True
# CELERY_TASK_IGNORE_RESULT = False
# CELERY_TASK_ROUTES = {
#     'converter_site.tasks.convert_audio_to_text': {'queue': 'audio_processing'},
#     'converter_site.tasks.create_gif_from_images': {'queue': 'image_processing'},
#     'converter_site.tasks.cleanup_old_files': {'queue': 'maintenance'},
# }
# CELERY_TASK_RETRY_DELAY = 60
# CELERY_TASK_MAX_RETRIES = 3
# CELERY_WORKER_HIJACK_ROOT_LOGGER = False
# CELERY_WORKER_LOG_FORMAT = '[%(asctime)s: %(levelname)s/%(processName)s] %(message)s'
# CELERY_WORKER_TASK_LOG_FORMAT = '[%(asctime)s: %(levelname)s/%(processName)s][%(task_name)s(%(task_id)s)] %(message)s'

# Все остальные настройки Celery отключены в dev режиме
# Периодические задачи, события, аннотации - все закомментировано

#     CELERY_BEAT_SCHEDULE = {
#         'cleanup-temp-files': {
#             'task': 'converter.tasks.cleanup_temp_files',
#             'schedule': crontab(minute=0, hour=2),  # Daily at 2:00 AM
#         },
#         'cleanup-old-media': {
#             'task': 'converter.tasks.cleanup_old_media',
#             'schedule': crontab(minute=30, hour=3),  # Daily at 3:30 AM
#         },
#     }
#     CELERY_BEAT_SCHEDULER = None
# 
# CELERY_TASK_REJECT_ON_WORKER_LOST = True
# CELERY_TASK_STORE_EAGER_RESULT = True
# CELERY_SEND_TASK_SENT_EVENT = True
# CELERY_SEND_EVENTS = True
# 
# CELERY_TASK_ANNOTATIONS = {
#     'converter_site.tasks.convert_audio_to_text': {
#         'rate_limit': '10/m',
#         'time_limit': 3600,
#         'soft_time_limit': 3300,
#     },
#     'converter_site.tasks.create_gif_from_images': {
#         'rate_limit': '20/m', 
#         'time_limit': 1800,
#         'soft_time_limit': 1500,
#     },
# }

# ===================
# TEMPORARY FILES & CLEANUP CONFIGURATION
# ===================

# Secure temporary directory
TEMP_DIR = BASE_DIR / config('TEMP_DIR', default='temp')
TEMP_FILE_MAX_AGE = config('TEMP_FILE_MAX_AGE', default=3600, cast=int)  # 1 hour in seconds
MEDIA_FILE_MAX_AGE = config('MEDIA_FILE_MAX_AGE', default=86400, cast=int)  # 24 hours in seconds

# Ensure temp directory exists and has proper permissions
os.makedirs(TEMP_DIR, exist_ok=True)
if hasattr(os, 'chmod'):
    os.chmod(TEMP_DIR, 0o750)  # rwxr-x---

# ===================
# DEPLOYMENT CONFIGURATION
# ===================

# Port configuration for deployment platforms (Render, Heroku, etc.)
PORT = config('PORT', default=8000, cast=int)

# ===================
# LOGGING CONFIGURATION
# ===================

# Simple console-only logging configuration for deployment
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '{levelname} {asctime} {name} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'converter': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'gunicorn': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
